<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="us.duia.leejo0531.dao.QuestionMapper">
	<resultMap type="Question" id="QuestionResult">
		<id property="questionNum" column="questionNum"/>
		<result property="userNum" column="userNum"/>
		<result property="timeLimit" column="timeLimit"/>
		<result property="qstatus" column="qstatus"/>
		<result property="regDate" column="regDate"/>
		<result property="modDate" column="modDate"/>
		<result property="title" column="title"/>
		<result property="MinorNum" column="MinorNum"/>
		<result property="videoSrc" column="videoSrc"/>
		<result property="questionContent" column="questionContent"/>
		<result property="point" column="point"/>
		<result property="selectedReplyNum" column="selectedReplyNum"/>
		<result property="timeCheck" column="timeCheck"/>
		<result property="replyCount" column="replyCount"/>
		<collection property="relatedTag" javaType="ArrayList" ofType="string">
			<result property="tag" column="tag"/>
		</collection>
	</resultMap>
	<resultMap type="Detail" id="QuestionDetail">
		<id property="questionNum" column="questionNum"/>
		<result property="userNum" column="userNum"/>
		<result property="timeLimit" column="timeLimit"/>
		<result property="qstatus" column="qstatus"/>
		<result property="regDate" column="regDate"/>
		<result property="modDate" column="modDate"/>
		<result property="title" column="title"/>
		<result property="minorNum" column="minorNum"/>
		<result property="videoSrc" column="videoSrc"/>
		<result property="questionContent" column="questionContent"/>
		<result property="point" column="point"/>
		<result property="selectedReplyNum" column="selectedReplyNum"/>
		<result property="timeCheck" column="timeCheck"/>
		<result property="replyCount" column="replyCount"/>
		<result property="id" column="id"/>
		<result property="minorName" column="minorName"/>
		<collection property="relatedTag" javaType="ArrayList" ofType="string">
			<result property="tag" column="tag"/>
		</collection>
	</resultMap>
	
	<update id="rebuildQContentIndex">
		alter index q_content_idx rebuild
	</update>
	
	<update id="rebuildRContentIndex">
		alter index r_content_idx rebuild
	</update>
	
	<select id="getQuestionDetail" parameterType="Question" resultMap="QuestionDetail">
		select
            tag,
			numbered.*,
			case 
		        when timeLimit is null
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
            tag,
			(select
				rownum as r,
				results.*
			from
                (select
                    merged.*,
                    nvl(replyCount, 0) as replyCount
                from
	                (select
	                	selected.*,
	                	minor.minorname
	                from
	                	minor,
		                (select
		                	q_board.*,
		                	id
		                from
		                	q_board,
		                	userinfo
		                where
		                	q_board.usernum = userinfo.usernum
		                	and q_board.questionnum = ${questionNum}
		                )selected
		            where
		            	minor.minornum = selected.minornum
					)merged,
                    (select
                        questionnum,
                        count(*) as replyCount
                    from
                        q_reply
                    group by
                        questionnum
                    )rCount
                where
                    merged.questionnum = rCount.questionnum(+)
                order by merged.questionnum desc
				) results
			)numbered
		where
            numbered.questionnum = tag.questionnum(+)
        order by
            numbered.questionnum desc, tag.tagnum
	</select>

	<!-- 질문글의 시퀀스를 가져온다. -->
	<select id="Q_BOARD_SEQ_NEXTVAL" resultType="int">
		SELECT Q_BOARD_SEQ.NEXTVAL as questionNum FROM dual
	</select>
	
	<!-- 질문글을 게시한다. -->
	<insert id="insertQuestion" parameterType="Question">
		insert into Q_Board(
			questionNum,
			userNum,
			timeLimit,
			qstatus,
			regDate,
			modDate,
			title,
			hit,
			questionContent,
			MinorNum,
			videoSrc,
			point
		) values(
			#{questionNum},
			#{userNum},
			#{timeLimit},
			#{qstatus},
			sysdate,
			sysdate,
			#{title},
			0,
			#{questionContent},
			#{MinorNum},
			#{videoSrc},
			#{point}
		)
	</insert>
	
	<!-- 질문글을 삭제한다. (임시) 테스트 되지않음.-->
	<delete id="deleteQuestion" parameterType="Question">
	delete Q_BOARD where usernum = #{usernum} and QuestionNum = #{QuestionNum}
	</delete>
	
	<!-- 대분류 리스트 불러오기 -->	
	<select id="getMajorList" resultType="Major">
		select * from major order by majorNum
	</select>
	
	<select id="getMajor" parameterType="int" resultType="Major">
		select * from major where majorNum = #{majorNum}
	</select>
	
	<!-- 소분류 리스트 불러오기 -->
	<select id="getMinorList" resultType="Minor">
		select * from minor order by minorNum
	</select>
	
	<select id="getMinor" parameterType="int" resultType="Minor">
		select * from minor where minorNum = #{minorNum}
	</select>
	
	<!-- 대상 질문글 정보를 가져온다.(임시) -->
	<select id="selectOneQuestion" parameterType="Question" resultMap="QuestionResult">
		select *
		from 
			(
				select q_board.*, nvl(reply.replyCount, 0) as replyCount from q_board, 
					(select questionNum, nvl(count(*),0) as replyCount from q_reply group by questionNum) 
				reply where q_board.questionNum = reply.questionNum(+)
			) Q_Board, tag
		where Q_Board.questionNum = #{questionNum}
		and Q_Board.questionNum = tag.questionNum(+)
	</select>
	
	<!-- context가 들어간 질문글을 가져온다. -->
	<select id="searchByContext" parameterType="Page" resultMap="QuestionResult">
        select
            tag,
			numbered.*,
			case 
		        when timeLimit is null
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
            tag,
			(select
				rownum as r,
				results.*
			from
                (select
                    merged.*,
                    nvl(replyCount, 0) as replyCount
                from
                    (select
                        selected.*
                    from
                        (select
                            q_board.*
                        from
                            q_board,
                            (select
                                *
                            from
                                tag,
                                (select
                                    max(tagnum) as tags
                                from
                                    tag
                                <trim prefix="where" prefixOverrides="and|or">
                                    <foreach collection="list" item="item">or lower(tag) like lower('%${item}%')</foreach>
                                </trim>
                                group by 
                                    questionnum
                                ) searchedtag   
                            where
                                tag.tagnum = searchedtag.tags
                             ) targetQstn
                        where
                            q_board.questionnum = targetQstn.questionnum
                        ) selected
                    where
                        #{searchType} = 'tag' 
                    
                    union all
                    
                    select
                        selected.*
                    from
                        (select
                            q_board.*
                        from
                            userinfo,
                            q_board
                        where
                            q_board.usernum = userinfo.USERNUM(+)
                            <foreach collection="list" item="item">and lower(userinfo.USERNAME) like lower('%${item}%')</foreach>
                        
                        union
                        
                        select
                            q_board.*
                        from
                            q_board,
                            (select
                                questionnum
                            from
                                q_reply,
                                userinfo
                            where
                                q_reply.usernum = userinfo.usernum(+)
                            	<foreach collection="list" item="item">and lower(userinfo.USERNAME) like lower('%${item}%')</foreach>
                            group by
                                questionnum
                            )targetQstn
                        where
                            q_board.questionnum = targetQstn.questionnum
                        ) selected
                    where
                        #{searchType} = 'author' 
                    
                    union all
                    
                    select
                        selected.*
                    from
                        (select
                            q_board.*
                        from
                            q_board
                        <trim prefix="where" prefixOverrides="and|or">
                            <foreach collection="list" item="item">and lower(title) like lower('%${item}%')</foreach>
                        </trim>
                            
                        union
                        
                        select
                            q_board.*
                        from
                            q_board,
                            (select
                                questionnum
                            from
                                q_reply
                            <trim prefix="where" prefixOverrides="and|or">
                                <foreach collection="list" item="item">and lower(replytitle) like lower('%${item}%')</foreach>
                            </trim>
                            group by
                                questionnum
                            )targetQstn
                        where
                            q_board.questionnum = targetQstn.questionnum
                        ) selected
                    where
                        #{searchType} = 'title' 
                    
                    union all
                    
                    select
                        selected.*
                    from
                        (select
                            q_board.*
                        from
                            q_board
				        <trim prefix="where" prefixOverrides="and|or">
				        	<!-- <foreach collection="list" item="item">and contains( questioncontent, '%${item}%') >0</foreach> -->
				        	<foreach collection="list" item="item">and lower(questioncontent) like lower('%${item}%')</foreach>
				        </trim>
                    
                        union
                        
                        select
                            q_board.*
                        from
                            q_board,
                            (select
                                questionnum
                            from
                                q_reply
							<trim prefix="where" prefixOverrides="and|or">
					        	<!-- <foreach collection="list" item="item">and contains( replycontent, '%${item}%') >0</foreach> -->
					        	<foreach collection="list" item="item">and lower(replycontent) like lower('%${item}%')</foreach>
					        </trim>
                            group by questionnum
                            ) targetQstn
                        where
                            q_board.questionnum = targetQstn.questionnum
                        ) selected
                    where
                        #{searchType} = 'content'
                    )merged,
                    (select
                        questionnum,
                        count(*) as replyCount
                    from
                        q_reply
                    group by
                        questionnum
                    )rCount
                where
                    merged.questionnum = rCount.questionnum(+)
                order by merged.questionnum desc
				) results
			)numbered
		where
            <![CDATA[ r >= ${from} and r <= ${to} ]]>
            and numbered.questionnum = tag.questionnum(+)
        order by
            numbered.questionnum desc, tag.tagnum
	</select>
	
	<select id="myQuestionList"  parameterType="Page" resultMap="QuestionResult">
		select
            tag,
			numbered.*,
			case 
		        when timeLimit is null 
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
            tag,
			(select
				rownum as r,
				results.*
			from
                (select
                    merged.*,
                    nvl(replyCount, 0) as replyCount
                from
                    (select
                        selected.*
                    from
                        (select
                            q_board.*
                        from
                            userinfo,
                            q_board
                        where
                            q_board.usernum = userinfo.USERNUM(+)
                            <foreach collection="list" item="item">and lower(userinfo.USERNAME) like lower('%${item}%')</foreach>
                        
                        union
                        
                        select
                            q_board.*
                        from
                            q_board,
                            (select
                                questionnum
                            from
                                q_reply,
                                userinfo
                            where
                                q_reply.usernum = userinfo.usernum(+)
                            	<foreach collection="list" item="item">and lower(userinfo.USERNAME) like lower('%${item}%')</foreach>
                            group by
                                questionnum
                            )targetQstn
                        where
                            q_board.questionnum = targetQstn.questionnum
                        ) selected
                    where
                        #{searchType} = 'author' 
                    )merged,
                    (select
                        questionnum,
                        count(*) as replyCount
                    from
                        q_reply
                    group by
                        questionnum
                    )rCount
                where
                    merged.questionnum = rCount.questionnum(+)
                order by merged.questionnum desc
				) results
			)numbered
		where
            <![CDATA[ r >= ${from} and r <= ${to} ]]>
            and numbered.questionnum = tag.questionnum(+)
        order by
            numbered.questionnum desc, tag.tagnum
	</select>
	
	<select id="getQuestionTag" parameterType="Question" resultType="Tag">
		select tag from tag where questionNum = #{questionNum} order by tag asc
	</select>
	
	<select id="getQuestionTime" parameterType="int" resultType="checkTime">
		SELECT questionNum, ROUND((sysdate - REGDATE)/(30*12)) as year
	  ,	ROUND((sysdate - REGDATE)/30) as month
      , ROUND(sysdate - REGDATE) as day
      , ROUND((sysdate - REGDATE)*24) as hour
      , ROUND((sysdate - REGDATE)*24*60) as minute
  		FROM q_board where questionNum = #{questionNum}
	</select>
	<!-- 전체 질문글 가져오기 -->
	<select id="getAllQuestion" resultMap="QuestionResult">
		select *
		from Q_Board, tag
		where Q_Board.questionNum = tag.questionNum(+)
	</select>
	<!-- 답변 없는 질문글 가져오기 -->
<!-- 	<select id="search_no_answered" resultMap="QuestionResult">
		select
            tag,
			numbered.*,
			case 
		        when timeLimit is null 
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
			tag,
		    (select
		        q_board.*
		    from
		        q_board,
		        (select
		            q_reply.*
		        from
		            q_reply,
		            (select
		                max(replynum) as answered
		            from
		                q_reply
		            group by
		                questionnum
		            ) reply
		        where q_reply.replynum = reply.answered
		        ) no_dupl
		    where
		        q_board.questionnum = no_dupl.questionnum(+)
		        and no_dupl.questionnum is null
		    ) no_answer
		where no_answer.questionnum = tag.questionnum(+)
		order by no_answer.questionnum
	</select> -->
	
		<!-- 범위지정 질문글 가져오기  -->
	<select id="getQuestionPage" parameterType="map" resultType="Question">
		<![CDATA[SELECT * FROM ( SELECT A.*,ROWNUM AS RNUM FROM 
              ( SELECT * FROM q_board
                ORDER BY questionnum desc
               ) A
        WHERE ROWNUM <= #{endpage}
               )
		WHERE RNUM > #{startpage} ]]> 
    </select>
    
    <!-- 질문글에서 작성한 동영상을 q_attach 테이블에 넣는다. -->
    <insert id="insertVideoFromAskQuestion" parameterType="map">
    		insert into q_attach values(Q_ATTACH_SEQ.nextVal, #{QUESTIONNUM}, #{USERNUM}, #{QFILENAME}, #{QFILEPATH})
    </insert>
    
    <select id="searchRecentPost" parameterType="Page"  resultMap="QuestionResult">
		select
            tag,
			numbered.*,
			case 
		        when timeLimit is null 
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
            tag,
			(select
				rownum as r,
				results.*
			from
                (select
                    merged.*,
                    nvl(replyCount, 0) as replyCount
                from
                    (select
                    	*
                    from
                    	q_board
                    )merged,
                    (select
                        questionnum,
                        count(*) as replyCount
                    from
                        q_reply
                    group by
                        questionnum
                    )rCount
                where
                    merged.questionnum = rCount.questionnum(+)
                order by merged.questionnum desc
				) results
			)numbered
		where
            <![CDATA[ r >= ${from} and r <= ${to} ]]>
            and numbered.questionnum = tag.questionnum(+)
        order by
            numbered.questionnum desc, tag.tagnum
	</select>
	
	<select id="searchUrgentPost" parameterType="Page"  resultMap="QuestionResult">
		select
            tag,
			numbered.*,
			case 
		        when timeLimit is null 
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
            tag,
			(select
				rownum as r,
				results.*
			from
                (select
                    merged.*,
                    nvl(replyCount, 0) as replyCount
                from
                    (select
                    	*
                    from
                    	q_board
                    where
                    	timelimit > sysdate
                    )merged,
                    (select
                        questionnum,
                        count(*) as replyCount
                    from
                        q_reply
                    group by
                        questionnum
                    )rCount
                where
                    merged.questionnum = rCount.questionnum(+)
                order by merged.questionnum desc
				) results
			)numbered
		where
            <![CDATA[ r >= ${from} and r <= ${to} ]]>
            and numbered.questionnum = tag.questionnum(+)
        order by
            numbered.questionnum desc, tag.tagnum
	</select>
	
	<select id="searchInProgressPost" parameterType="Page"  resultMap="QuestionResult">
		select
            tag,
			numbered.*,
			case 
		        when timeLimit is null 
		            <![CDATA[or timeLimit < sysdate then 0]]> 
		        else -1 
		    end as timeCheck
		from
            tag,
			(select
				rownum as r,
				results.*
			from
                (select
                    merged.*,
                    nvl(replyCount, 0) as replyCount
                from
                    (select
                    	*
                    from
                    	q_board
                    where
                    	qstatus = 'in progress'
                    )merged,
                    (select
                        questionnum,
                        count(*) as replyCount
                    from
                        q_reply
                    group by
                        questionnum
                    )rCount
                where
                    merged.questionnum = rCount.questionnum(+)
                order by merged.questionnum desc
				) results
			)numbered
		where
            <![CDATA[ r >= ${from} and r <= ${to} ]]>
            and numbered.questionnum = tag.questionnum(+)
        order by
            numbered.questionnum desc, tag.tagnum
	</select>
	
	<select id="checkPreNextQuestionNum" parameterType="int" resultType="hashMap">
		SELECT * 
			FROM (
			    SELECT 
			        LAG(questionNum,1,0) OVER (ORDER BY questionNum) AS PreQuestionNum,
			        questionNum,
			        LEAD(questionNum,1,0) OVER (ORDER BY questionNum) AS NextQuestionNum
			    FROM q_board
			    )
			WHERE questionNum = #{questionNum}
	</select>
	
	<!-- 질문글의 내용을 수정한다. -->
	<update id="modifyQuestion" parameterType="Question">
		update q_board set timeLimit = #{timeLimit}, moddate = sysdate, point = #{point} ,title = #{title}, questionContent = #{questionContent}, MinorNum = #{MinorNum}, videoSrc = #{videoSrc} where questionNum = #{questionNum}
	</update>
	
	<select id="getQList" resultType="Question">
		<![CDATA[select * from q_board where rownum<=20 order by REGDATE desc]]>
	</select>
	
</mapper>
